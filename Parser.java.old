

public class Parser {
	public static final int _EOF = 0;
	public static final int _integer = 1;
	public static final int _uppercase_id = 2;
	public static final int _lowercase_id = 3;
	public static final int maxT = 43;

	static final boolean _T = true;
	static final boolean _x = false;
	static final int minErrDist = 2;

	public Token t;    // last recognized token
	public Token la;   // lookahead token
	int errDist = minErrDist;
	
	public Scanner scanner;
	public Errors errors;

	

	public Parser(Scanner scanner) {
		this.scanner = scanner;
		errors = new Errors();
	}

	void SynErr (int n) {
		if (errDist >= minErrDist) errors.SynErr(la.line, la.col, n);
		errDist = 0;
	}

	public void SemErr (String msg) {
		if (errDist >= minErrDist) errors.SemErr(t.line, t.col, msg);
		errDist = 0;
	}
	
	void Get () {
		for (;;) {
			t = la;
			la = scanner.Scan();
			if (la.kind <= maxT) {
				++errDist;
				break;
			}

			la = t;
		}
	}
	
	void Expect (int n) {
		if (la.kind==n) Get(); else { SynErr(n); }
	}
	
	boolean StartOf (int s) {
		return set[s][la.kind];
	}
	
	void ExpectWeak (int n, int follow) {
		if (la.kind == n) Get();
		else {
			SynErr(n);
			while (!StartOf(follow)) Get();
		}
	}
	
	boolean WeakSeparator (int n, int syFol, int repFol) {
		int kind = la.kind;
		if (kind == n) { Get(); return true; }
		else if (StartOf(repFol)) return false;
		else {
			SynErr(n);
			while (!(set[syFol][kind] || set[repFol][kind] || set[0][kind])) {
				Get();
				kind = la.kind;
			}
			return StartOf(syFol);
		}
	}
	
	void FSP() {
		start();
		while (StartOf(1)) {
			start();
		}
		trace();
	}

	void start() {
		if (la.kind == 2) {
			primitive_process();
		} else if (la.kind == 22) {
			constant_declaration();
		} else if (la.kind == 24) {
			range_declaration();
		} else if (la.kind == 19) {
			composite_process();
		} else SynErr(44);
	}

	void trace() {
		Expect(4);
		if (la.kind == 3) {
			trace_action();
			while (la.kind == 5) {
				Get();
				trace_action();
			}
		}
		Expect(6);
	}

	void trace_action() {
		Expect(3);
		if (la.kind == 26) {
			index_label();
		}
	}

	void primitive_process() {
		Expect(2);
		if (la.kind == 11) {
			Get();
			parameter_list();
			Expect(12);
		}
		if (la.kind == 26) {
			index_label();
		}
		Expect(23);
		if (la.kind == 2 || la.kind == 37 || la.kind == 38) {
			local_process();
		} else if (la.kind == 11) {
			Get();
			primitive_process_body();
			Expect(12);
		} else SynErr(45);
		if (la.kind == 29) {
			Get();
		} else if (la.kind == 31) {
			Get();
		} else SynErr(46);
	}

	void constant_declaration() {
		Expect(22);
		Expect(2);
		Expect(23);
		expr();
	}

	void range_declaration() {
		Expect(24);
		Expect(2);
		Expect(23);
		expr();
		Expect(25);
		expr();
	}

	void composite_process() {
		Expect(19);
		Expect(2);
		if (la.kind == 11) {
			Get();
			parameter_list();
			Expect(12);
		}
		Expect(23);
		composite_body();
		if (la.kind == 33 || la.kind == 34) {
			label_visibility();
		}
		if (la.kind == 10) {
			relabels();
		}
		Expect(29);
	}

	void expr() {
		term();
		while (la.kind == 7 || la.kind == 8) {
			if (la.kind == 7) {
				Get();
			} else {
				Get();
			}
			term();
		}
	}

	void term() {
		factor();
		while (la.kind == 9 || la.kind == 10) {
			if (la.kind == 9) {
				Get();
			} else {
				Get();
			}
			factor();
		}
	}

	void factor() {
		if (la.kind == 11) {
			Get();
			expr();
			Expect(12);
		} else if (la.kind == 2) {
			Get();
		} else if (la.kind == 3) {
			Get();
		} else if (la.kind == 1) {
			Get();
		} else SynErr(47);
	}

	void boolean_expr() {
		expr();
		while (StartOf(2)) {
			switch (la.kind) {
			case 13: {
				Get();
				break;
			}
			case 14: {
				Get();
				break;
			}
			case 15: {
				Get();
				break;
			}
			case 16: {
				Get();
				break;
			}
			case 17: {
				Get();
				break;
			}
			case 18: {
				Get();
				break;
			}
			case 19: {
				Get();
				break;
			}
			case 20: {
				Get();
				break;
			}
			case 21: {
				Get();
				break;
			}
			}
			expr();
		}
	}

	void index() {
		Expect(26);
		expr();
		while (la.kind == 27) {
			Get();
			expr();
			while (la.kind == 25) {
				Get();
				expr();
			}
		}
		Expect(28);
	}

	void index_label() {
		index();
		while (la.kind == 26) {
			index();
		}
	}

	void simple_action() {
		Expect(3);
		if (la.kind == 26) {
			index_label();
		}
	}

	void action() {
		simple_action();
		while (la.kind == 29) {
			Get();
			simple_action();
		}
	}

	void action_set() {
		Expect(30);
		action();
		while (la.kind == 31) {
			Get();
			action();
		}
		Expect(32);
	}

	void alphabet_extension() {
		Expect(7);
		action_set();
	}

	void label_visibility() {
		if (la.kind == 33) {
			hide_label();
		} else if (la.kind == 34) {
			expose_label();
		} else SynErr(48);
	}

	void hide_label() {
		Expect(33);
		action_set();
	}

	void expose_label() {
		Expect(34);
		action_set();
	}

	void relabels() {
		Expect(10);
		relabel_set();
	}

	void relabel_set() {
		Expect(30);
		relabel();
		while (la.kind == 31) {
			Get();
			relabel();
		}
		Expect(32);
	}

	void relabel() {
		if (la.kind == 3) {
			simple_relabel();
		} else if (la.kind == 35) {
			Get();
			index();
			relabel_set();
		} else SynErr(49);
	}

	void simple_relabel() {
		action();
		Expect(10);
		action();
	}

	void parameter_list() {
		parameter();
		while (la.kind == 31) {
			Get();
			parameter();
		}
	}

	void local_process() {
		if (la.kind == 2) {
			Get();
			if (la.kind == 26) {
				index();
			}
		} else if (la.kind == 37 || la.kind == 38) {
			if (la.kind == 37) {
				Get();
			} else {
				Get();
			}
		} else SynErr(50);
	}

	void primitive_process_body() {
		process_body();
		while (la.kind == 5 || la.kind == 36) {
			if (la.kind == 5) {
				Get();
			} else {
				Get();
			}
			process_body();
		}
		if (la.kind == 7) {
			alphabet_extension();
		}
		if (la.kind == 33 || la.kind == 34) {
			label_visibility();
		}
		if (la.kind == 10) {
			relabels();
		}
	}

	void parameter() {
		Expect(2);
		Expect(23);
		Expect(1);
	}

	void process_body() {
		if (la.kind == 3 || la.kind == 30 || la.kind == 39) {
			choice();
		} else if (la.kind == 2 || la.kind == 37 || la.kind == 38) {
			local_process();
		} else if (la.kind == 40) {
			condition();
		} else SynErr(51);
	}

	void choice() {
		if (la.kind == 39) {
			Get();
			boolean_expr();
		}
		if (la.kind == 30) {
			action_set();
		} else if (la.kind == 3) {
			action();
		} else SynErr(52);
		Expect(5);
		process_body();
	}

	void condition() {
		Expect(40);
		boolean_expr();
		Expect(41);
		process_body();
		Expect(42);
		process_body();
	}

	void composite_body() {
		if (la.kind == 2 || la.kind == 3) {
			process_instance();
		} else if (la.kind == 11) {
			parallel_list();
		} else if (la.kind == 40) {
			composite_conditional();
		} else if (la.kind == 35) {
			compositi_replicator();
		} else SynErr(53);
	}

	void process_instance() {
		if (la.kind == 3) {
			action();
			Expect(27);
		}
		Expect(2);
		if (la.kind == 11) {
			Get();
			actual_parameter_list();
			Expect(12);
		}
	}

	void parallel_list() {
		Expect(11);
		composite_body();
		while (la.kind == 19) {
			Get();
			composite_body();
		}
		Expect(12);
	}

	void composite_conditional() {
		Expect(40);
		boolean_expr();
		Expect(41);
		composite_body();
		Expect(42);
		composite_body();
	}

	void compositi_replicator() {
		Expect(35);
		index();
		composite_body();
	}

	void actual_parameter_list() {
		expr();
		while (la.kind == 31) {
			Get();
			expr();
		}
	}



	public void Parse() {
		la = new Token();
		la.val = "";		
		Get();
		FSP();
		Expect(0);

	}

	private static final boolean[][] set = {
		{_T,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x},
		{_x,_x,_T,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_T, _x,_x,_T,_x, _T,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x},
		{_x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_T,_T,_T, _T,_T,_T,_T, _T,_T,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x}

	};
} // end Parser


class Errors {
	public int count = 0;                                    // number of errors detected
	public java.io.PrintStream errorStream = System.out;     // error messages go to this stream
	public String errMsgFormat = "-- line {0} col {1}: {2}"; // 0=line, 1=column, 2=text
	
	protected void printMsg(int line, int column, String msg) {
		StringBuffer b = new StringBuffer(errMsgFormat);
		int pos = b.indexOf("{0}");
		if (pos >= 0) { b.delete(pos, pos+3); b.insert(pos, line); }
		pos = b.indexOf("{1}");
		if (pos >= 0) { b.delete(pos, pos+3); b.insert(pos, column); }
		pos = b.indexOf("{2}");
		if (pos >= 0) b.replace(pos, pos+3, msg);
		errorStream.println(b.toString());
	}
	
	public void SynErr (int line, int col, int n) {
		String s;
		switch (n) {
			case 0: s = "EOF expected"; break;
			case 1: s = "integer expected"; break;
			case 2: s = "uppercase_id expected"; break;
			case 3: s = "lowercase_id expected"; break;
			case 4: s = "\"TRACE\" expected"; break;
			case 5: s = "\"->\" expected"; break;
			case 6: s = "\"ENDTRACE\" expected"; break;
			case 7: s = "\"+\" expected"; break;
			case 8: s = "\"-\" expected"; break;
			case 9: s = "\"*\" expected"; break;
			case 10: s = "\"/\" expected"; break;
			case 11: s = "\"(\" expected"; break;
			case 12: s = "\")\" expected"; break;
			case 13: s = "\">\" expected"; break;
			case 14: s = "\"<\" expected"; break;
			case 15: s = "\">=\" expected"; break;
			case 16: s = "\"<=\" expected"; break;
			case 17: s = "\"==\" expected"; break;
			case 18: s = "\"&&\" expected"; break;
			case 19: s = "\"||\" expected"; break;
			case 20: s = "\"!\" expected"; break;
			case 21: s = "\"!=\" expected"; break;
			case 22: s = "\"const\" expected"; break;
			case 23: s = "\"=\" expected"; break;
			case 24: s = "\"range\" expected"; break;
			case 25: s = "\"..\" expected"; break;
			case 26: s = "\"[\" expected"; break;
			case 27: s = "\":\" expected"; break;
			case 28: s = "\"]\" expected"; break;
			case 29: s = "\".\" expected"; break;
			case 30: s = "\"{\" expected"; break;
			case 31: s = "\",\" expected"; break;
			case 32: s = "\"}\" expected"; break;
			case 33: s = "\"\\\\\" expected"; break;
			case 34: s = "\"@\" expected"; break;
			case 35: s = "\"forall\" expected"; break;
			case 36: s = "\"|\" expected"; break;
			case 37: s = "\"STOP\" expected"; break;
			case 38: s = "\"ERROR\" expected"; break;
			case 39: s = "\"when\" expected"; break;
			case 40: s = "\"if\" expected"; break;
			case 41: s = "\"then\" expected"; break;
			case 42: s = "\"else\" expected"; break;
			case 43: s = "??? expected"; break;
			case 44: s = "invalid start"; break;
			case 45: s = "invalid primitive_process"; break;
			case 46: s = "invalid primitive_process"; break;
			case 47: s = "invalid factor"; break;
			case 48: s = "invalid label_visibility"; break;
			case 49: s = "invalid relabel"; break;
			case 50: s = "invalid local_process"; break;
			case 51: s = "invalid process_body"; break;
			case 52: s = "invalid choice"; break;
			case 53: s = "invalid composite_body"; break;
			default: s = "error " + n; break;
		}
		printMsg(line, col, s);
		count++;
	}

	public void SemErr (int line, int col, String s) {	
		printMsg(line, col, s);
		count++;
	}
	
	public void SemErr (String s) {
		errorStream.println(s);
		count++;
	}
	
	public void Warning (int line, int col, String s) {	
		printMsg(line, col, s);
	}
	
	public void Warning (String s) {
		errorStream.println(s);
	}
} // Errors


class FatalError extends RuntimeException {
	public static final long serialVersionUID = 1L;
	public FatalError(String s) { super(s); }
}
