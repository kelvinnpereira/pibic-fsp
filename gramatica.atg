import java.io.IOException;
import java.io.File;
import java.util.ArrayList;
import javax.script.ScriptEngineManager;
import javax.script.ScriptEngine;
import javax.swing.*;

COMPILER FSP $F


    public ArrayList<Processo> processos;
    public ArrayList<ProcessoLocal> locais;
    public ArrayList<Range> rangeArray;
    public ArrayList<Const> constArray;
    public ArrayList<String> sharing_set;
    public ArrayList<ProcessInstance> pi;
    public Processo processo_atual, primeiro_atual;
    public Acao acao_atual;
    public int sup, inf, valor_expr;
    public String index, expressao = "", bool = "", composite_process_name = "", prefix;
    public ArrayList<HiperGrafo> grafoArray = new ArrayList<HiperGrafo>();
    public HiperGrafo grafo;
    public boolean acao_inicio, conjunto;
    public Vertice vertice_atual;
    private ScriptEngineManager manager = new ScriptEngineManager();
    private ScriptEngine eng = manager.getEngineByName("JavaScript");
    private ArrayList<ProcessThread> pthreadArray = new ArrayList<ProcessThread>(), pthreadArrayInstance = new ArrayList<ProcessThread>();
    private Geracao generator = new Geracao(pthreadArrayInstance);
    private Trace trace;
    private InterfaceGrafica ig;

    public void init(){
        processos = new ArrayList<Processo>();
        locais = new ArrayList<ProcessoLocal>();
        rangeArray = new ArrayList<Range>();
        constArray = new ArrayList<Const>();
        processo_atual = primeiro_atual = null;
        acao_atual = null;
        inf = sup = valor_expr = -1;
        index = expressao = bool = "";
        grafo = new HiperGrafo();
        grafoArray.add(grafo);
        acao_inicio = conjunto = false;
        vertice_atual = null;
    }

    public void setTrace(Trace trace){
        this.trace = trace;
    }

    public void setIg(InterfaceGrafica ig){
        this.ig = ig;
    }

    public void newThread(){
        finalizaGrafo();
        pthreadArray.add(new ProcessThread(processos, constArray, rangeArray, primeiro_atual));
        //if(errors.count > 0) System.exit(1);
        init();
    }

    public void startInterface(){
        if(pthreadArray.size() == 1) {
            generator.setPthreadArray(pthreadArray);
            addCheckBox(pthreadArray.get(0), grafoArray.get(0));
        }
        trace.setGrafoArray(grafoArray);
        trace.setGenerator(generator);
        trace.start_trace();
    }

    public void p(String str){
    	System.out.println(str);
    }

    public void la(){
        System.out.println("la.val: "+la.val);
    }

    public void t(){
        System.out.println("t.val: "+t.val);
    }

    public void print(){
        System.out.println("--------------------------------------------------------------------");
        for(int i=0;i<processos.size();i++){
            System.out.println(processos.get(i));
            processos.get(i).printAcoes();
        }
        System.out.println("\nProcessoLocal");
        for(int i=0;i<locais.size();i++){
            System.out.println("locais "+locais.get(i));
        }
        System.out.println("\n"+grafo);
        System.out.println("--------------------------------------------------------------------");
    }

    public void printGrafos(){
        System.out.println("--------------------------------------------------------------------");
        for(int i=0;i<grafoArray.size();i++){
            System.out.println(grafoArray.get(i)+"\n");
            System.out.println("--------------------------------------------------------------------");
        }
    }

    public Processo novoProcesso(String nome, String indice, int valor, Range range){
        Processo p = new Processo(nome, indice, valor, range);
        if(!processos.contains(p)) 
            processos.add(p);
        return p;
    }

    public Acao novaAcao(String nome, String indice, int valor_indice, int estado, Processo pa){
        if(pa == null) return null;
        Acao a = new Acao(nome, pa, indice, valor_indice, estado);
        int i = pa.getAcoes().lastIndexOf(a), num = 0;
        if(i != -1)
            a.setId(pa.getAcoes().get(i).getId() + 1);
        pa.getAcoes().add(a);
        return a;
    }

    public Acao achaAcao(String nome, int estado, int valor_indice){
        for(int i=0;i<processos.size();i++){
            ArrayList<Acao> acoes = processos.get(i).getAcoes();
            for(int j=0;j<acoes.size();j++){
                if(acoes.get(j).getNome().equals(nome) && acoes.get(j).getEstado() == estado && acoes.get(j).getValorIndice() == valor_indice) 
                    return acoes.get(j);
            }
        }
        return null;
    }

    public boolean isNum(char c){
        return c >= '0' && c <= '9';
    }

    public void finalizaGrafo(){
        ArrayList<Vertice> vertices = grafo.getVertices();
        int i = 0;
        while(i<vertices.size()){
            Vertice v = vertices.get(i);
            int p_index = processos.indexOf(new Processo(v.getNome(), v.getValorIndice()));
            if(!v.getNome().equals("ERROR") && !v.getNome().equals("STOP") && v.getNome().charAt(0) >= 'A' && v.getNome().charAt(0) <= 'Z'){
                if(p_index != -1){
                    ArrayList<Acao> acoes = processos.get(p_index).getAcoes();
                    ArrayList<Aresta> arestas = v.getArestas();
                    for(int a=0;a<arestas.size();a++){
                        ArrayList<Vertice> vadj = arestas.get(a).getVertices();
                        for(int b=0;b<vadj.size();b++){
                            for(int j=0;j<acoes.size();j++){
                                if(acoes.get(j).getInicio() )
                                    grafo.insereAdj(vadj.get(b), grafo.buscaUltimo(acoes.get(j).getNome(), acoes.get(j).getId(), acoes.get(j).getEstado(), acoes.get(j).getValorIndice()), new Aresta());
                            }
                            vadj.get(b).remove(v);
                        }
                    }
                }
                grafo.getVertices().remove(v);
                i=0;
            }
            i++;
        }
    }

    public String tiraIndice(String expr, String indice, String valor){
        if(expr.equals("") || indice.equals("") || valor.equals("")) return expr;
        return expr.contains(indice) ? expr.replace(indice, valor) : expr;
    }

    public boolean exprBool(String expr){
        if(!expr.equals("")){
            try{
                return (boolean)eng.eval(expr);
            }catch(Exception e){
                ig.output_area.setText(ig.output_area.getText()+"-- line "+t.line+" col "+t.col+": invalid expression "+expr+"\n");
            }
        }
        return true;
    }

    public int calcExpr(String expr){
        if(!expr.equals("")){
            try{
                return (int)eng.eval(expr);
            }catch(Exception e){
                ig.output_area.setText(ig.output_area.getText()+"-- line "+t.line+" col "+t.col+": invalid expression "+expr+"\n");
            }
        }
        return -1;
    }

    public void zeraAcoesAtuais(){
    	for(int i=0;i<processos.size();i++){
    		processos.get(i).setAcoesAtuais(new ArrayList<Acao>());
    	}
    }

    public void buscaNome(ArrayList<ProcessThread> pthreadArray, ArrayList<HiperGrafo> grafoArray){
        for(int i=0;i<pthreadArray.size();i++){
            ArrayList<Processo> p = pthreadArray.get(i).getProcessos();
            for(int j=0;j<p.size();j++){
                ArrayList<Acao> a = p.get(j).getAcoes();
                for(int k=0;k<a.size();k++){
                    if(buscaNome(grafoArray, a.get(k).getNome(), a.get(k).getValorIndice(), i)) a.get(k).setCompartilhada(true);
                }
            }
        }
    }

    public boolean buscaNome(ArrayList<HiperGrafo> grafoArray, String nome, int valor_indice, int indiceGrafo){
        for(int i=0;i<grafoArray.size();i++){
            Vertice v = grafoArray.get(i).busca(nome, valor_indice);
            if(v != null && i != indiceGrafo){
                v.setCompartilhada(true);
                return true;
            }
        }
        return false;
    }

    public Acao acao_simples(String nome, Processo pa, String indice, int valor_indice){
    	Acao a = null;
    	if(exprBool(tiraIndice(bool, pa.getIndice(), pa.getEstado()+""))){
	    	a = novaAcao(nome, indice, valor_indice, pa.getEstado(), pa);
	        vertice_atual = grafo.insereVertice(a.getNome(), a.getId(), a.getEstado(), a.getValorIndice());
	        ArrayList<Acao> acoes_atuais = pa.getAcoesAtuais();
	        if(acao_inicio){
	        	a.setInicio(true);
	        }else{
		        for(int i=0;i<acoes_atuais.size();i++){
		            grafo.insereAdj(grafo.busca(acoes_atuais.get(i).getNome(), acoes_atuais.get(i).getId(), acoes_atuais.get(i).getEstado(), acoes_atuais.get(i).getValorIndice()), vertice_atual, new Aresta());
		        }
		    }
	    }
	    return a;
    }

    public void acao_range(String nome, Processo pa){
    	ArrayList<Acao> acoes_aux = new ArrayList<Acao>();
    	for(int i=inf;i<=sup;i++){
    		Acao a = acao_simples(nome, pa, index, i);
    		acoes_aux.add(a);
    	}
    	pa.setAcoesAtuais(acoes_aux);
    }

    public void acao_range_index(String nome, Processo pa){
    	ArrayList<Acao> acoes_aux = new ArrayList<Acao>(), acoes_atuais = pa.getAcoesAtuais();
    	Acao a;
    	for(int i=inf, j=0;i<=sup;i++,j++){
    		a = acoes_atuais.get(j);
    		pa.setAcoesAtuais(new ArrayList<Acao>());
    		pa.getAcoesAtuais().add(a);
    		a = acao_simples(nome, pa, index, calcExpr(tiraIndice(expressao, index, i+"")));
    		acoes_aux.add(a);
    	}
    	pa.setAcoesAtuais(acoes_aux);
    }

    public void acao_index(String nome, int pa){
    	Range r = processos.get(pa).getRange();
    	Acao a;
    	for(int i=r.getInf();i<=r.getSup();i++){
    		processo_atual = processos.get(pa);
    		if(inf != -1 && sup != -1){
    			if(processo_atual.getAcoesAtuais().size() > 1)
    				acao_range_index(nome, processo_atual);
    			else
    				acao_range(nome, processos.get(pa));
    		}else{
    			a = acao_simples(nome, processos.get(pa), processos.get(pa).getIndice(), calcExpr(tiraIndice(expressao, processos.get(pa).getIndice(), processos.get(pa).getEstado()+"")));
    			processos.get(pa).setAcoesAtuais(new ArrayList<Acao>());
    			processos.get(pa).getAcoesAtuais().add(a);
    		}
    		pa++;
    	}
    }

    public void processo_local(String nome, Processo pa, int valor_indice){
    	if(exprBool(tiraIndice(bool, pa.getIndice(), pa.getEstado()+""))){
            ProcessoLocal pl = new ProcessoLocal(nome, pa.getEstado(), valor_indice);
            int j = locais.lastIndexOf(pl);
            if(j == -1)
                locais.add(pl);
            vertice_atual = grafo.insereVertice(nome, 0, pa.getEstado(), valor_indice);
            ArrayList<Acao> acoes_atuais = pa.getAcoesAtuais();
        	for(int i=0;i<acoes_atuais.size();i++){
                grafo.insereAdjSimetrica(grafo.busca(acoes_atuais.get(i).getNome(), acoes_atuais.get(i).getId(), acoes_atuais.get(i).getEstado(), acoes_atuais.get(i).getValorIndice()), vertice_atual);
            }
            pa.setAcoesAtuais(new ArrayList<Acao>());
    	}
    }

    public void processo_local_index(String nome, int pa){
    	Range r = processos.get(pa).getRange();
    	int valor_expr = -1;
    	for(int i=r.getInf();i<=r.getSup();i++){
    		valor_expr = calcExpr(tiraIndice(expressao, processos.get(pa).getIndice(), processos.get(pa).getEstado()+""));
            if(valor_expr >= r.getInf() && valor_expr <= r.getSup()){
            	processo_local(nome, processos.get(pa), valor_expr);
            }else{
            	processo_local("ERROR", processos.get(pa), -1);
            }
            pa++;
    	}
    }

    public void rename(String newName, String oldName){
        for(int i=0;i<grafoArray.size();i++){
            ArrayList<Vertice> vertices = grafoArray.get(i).getVertices();
            for(int j=0;j<vertices.size();j++){
                Vertice v = vertices.get(j);
                if(v.getNome().contains(oldName) ){
                    v.setNome(v.getNome().replace(oldName, newName));
                }
            }
        }
        for(int i=0;i<pthreadArray.size();i++){
            ArrayList<Processo> p = pthreadArray.get(i).getProcessos();
            for(int j=0;j<p.size();j++){
                ArrayList<Acao> a = p.get(j).getAcoes();
                for(int k=0;k<a.size();k++){
                    if(a.get(k).getNome().contains(oldName)){
                        a.get(k).setNome(a.get(k).getNome().replace(oldName, newName));
                    }
                }
            }
        }
    }

    public void addCheckBox(ProcessThread process, HiperGrafo hg){
        ArrayList<Processo> p = process.getProcessos();
        for(int i=0;i<p.size();i++){
            ArrayList<Acao> acoes = p.get(i).getAcoes();
            for(int j=0;j<acoes.size();j++){
                trace.addCheckBox(acoes.get(j), hg);
            }
        }
    }

CHARACTERS
lowercase_letter = 'a' .. 'z'.

uppercase_letter = 'A' .. 'Z'.

digit = '0' .. '9'.

TOKENS
integer = digit {digit}.

uppercase_id = uppercase_letter { digit | lowercase_letter | uppercase_letter | "_" }.

lowercase_id = lowercase_letter { digit | lowercase_letter | uppercase_letter | "_" | "." }.

COMMENTS FROM "/*" TO "*/"

IGNORE '\t' + '\r' + '\n'

PRODUCTIONS

FSP = 

(.
    init();
.)

start{start}.

start = primitive_process | constant_declaration | range_declaration | composite_process.

expr  = term  { (.expressao += la.val;.) ("+" | "-") term  }.

term  = factor { (.expressao += la.val;.) ("*" | "/") factor }.

factor = 

(.
    if(la.val.charAt(0) >= 'A' && la.val.charAt(0) <= 'Z' )
        try{
            expressao += ""+constArray.get(constArray.indexOf(new Const(la.val, 0))).getValor();
        }catch(Exception){}
    else
        expressao += la.val;
.) 

("("expr

(.
	if(la.val.charAt(0) == '(' || la.val.charAt(0) == ')' )
        expressao += la.val;
.)

")" | uppercase_id | lowercase_id | integer) .

boolean_expr = 

(.
	expressao = "";
.) 

expr 

(.
	bool += expressao;
.)

{ 

(.
	bool += la.val;
.) 

('>' | '<' | ">=" | "<=" | "==" | "&&" | "||" | "!" | "!=") 

(.
	expressao = "";
.) 

expr 

(.
	bool += expressao;
.)

}
.

constant_declaration = "const" 

(. 
    String nome = la.val;
.)

uppercase_id "=" 

(.
    la();
    int n = 0;
    try{
        n = Integer.parseInt(la.val);
    }catch(Exception e){
    }
    Const c = new Const(nome, n);
    if(!constArray.contains(c))
        constArray.add(c);
.)

expr.

range_declaration = "range" 

(.
    String nome = la.val;
.)

uppercase_id "=" 

(.
    int infLocal = -1;
    if( isNum(la.val.charAt(0)) ){
        infLocal = Integer.parseInt(la.val);
    }else{
        int index = constArray.indexOf(new Const(la.val, 0));
        if(index != -1)
            infLocal = constArray.get(index).getValor();
    }
.)

expr ".." 

(.
    int supLocal = -1;
    if( isNum(la.val.charAt(0)) ){
        supLocal = Integer.parseInt(la.val);
    }else{
        int index = constArray.indexOf(new Const(la.val, 0));
        if(index != -1)
            supLocal = constArray.get(index).getValor();
    }
.)
expr

(.
        Range r = new Range(nome, infLocal, supLocal);
        if(!rangeArray.contains(r))
            rangeArray.add(r);
        r = rangeArray.get(rangeArray.size()-1);
.)
.

index = "[" 

(.
    index = la.val;
    expressao = "";
.) 

expr{":"

(.
    String id = la.val;
    expressao = "";

.)

expr

(.
    int i = rangeArray.indexOf(new Range(la.val));
    if(i != -1){
        inf = rangeArray.get(i).getInf();
        sup = rangeArray.get(i).getSup();
    }else{
        inf = calcExpr(expressao);
    }
    expressao = "";
.)

{".."

expr

(.
    sup = calcExpr(expressao);
.)

}} "]".

index_label = index {index}.

simple_action = 

(.
    String nome = la.val;
.)

lowercase_id[index_label]

(.
	Acao a = null;
	if(primeiro_atual == null)
		primeiro_atual = processo_atual;
	Processo p = processo_atual;
    if(processo_atual != null && processo_atual.getEstado() == -1 ){
    	if(inf != -1 && sup != -1){
    		if(processo_atual.getAcoesAtuais().size() > 1)
    			acao_range_index(nome, processo_atual);
    		else
    			acao_range(nome, processo_atual);
    	}else{
    		a = acao_simples(nome, processo_atual, processo_atual.getIndice(), calcExpr(tiraIndice(expressao, processo_atual.getIndice(), processo_atual.getEstado()+"")));
	    	if(!la.val.equals(",")){
	    		processo_atual.setAcoesAtuais(new ArrayList<Acao>());
		        processo_atual.getAcoesAtuais().add(a);
		    }
    	}
    }else if(processo_atual != null){
    	acao_index(nome, processos.indexOf(processo_atual));
    }
    expressao = "";
    if(la.val.equals("->")) acao_inicio = false;
    acao_atual = a;
    processo_atual = p;
.)
.

action = simple_action {"."simple_action}.

action_set = 

(.
	ArrayList<Acao> acoes_atuais = new ArrayList<Acao>();
.)

"{" action

(.
	acoes_atuais.add(acao_atual);
.)

 { "," action 

(.
	acoes_atuais.add(acao_atual);
.)

} "}" 

(.
	processo_atual.setAcoesAtuais(acoes_atuais);
.).

alphabet_extension = "+"action_set.

label_visibility = hide_label | expose_label.

hide_label = "\\" action_set.

expose_label = "@" action_set.

relabels = "/" relabel_set.

relabel_set = "{"relabel{","relabel}"}".

relabel = simple_relabel | "forall" index relabel_set.

simple_relabel = 

(.
    String newName = la.val;
.)
action "/" 

(.
    String oldName = la.val;
.)

action

(.
    rename(newName, oldName);
.)
.

primitive_process =  

(.
    String nome = la.val;
.)

uppercase_id["("parameter_list")"][index_label]

(.
    int indexPl = locais.indexOf(new ProcessoLocal(nome, -1, 0));
    if(indexPl != -1 && inf != -1 && sup != -1){
        Processo p = null;
        for(int i=inf;i<=sup;i++){
            p = novoProcesso(nome, index, i, new Range(inf, sup));
            if(i == inf) processo_atual = p;
            if(i == locais.get(indexPl).getValorIndice() && primeiro_atual == null) primeiro_atual = p;
        }
        valor_expr = inf = sup = -1;
    }else{
        processo_atual = novoProcesso(nome, "", -1, null);
    }
    acao_inicio = true;
    expressao = "";
.)

"=" ( local_process | "(" primitive_process_body ")" )

(.
    if(la.val.equals(".")){
        newThread();
    }
.)

("." | ",").

parameter_list = parameter {","parameter}.

parameter = 

(.
    String nome = la.val;
.)

uppercase_id "=" 

(.
    int n = 0;
    try{
        n = Integer.parseInt(la.val);
    }catch(Exception e){
    }
    Const c = new Const(nome, n);
    if(!constArray.contains(c))
        constArray.add(c);
.)

integer.

primitive_process_body = process_body { 

(.
    if(la.val.equals("|")){
        acao_inicio = true;
        zeraAcoesAtuais();
    }
.)

("->" | "|") process_body }[alphabet_extension][label_visibility][relabels].

local_process = 

(.
    String nome = la.val;
.)

(uppercase_id[index]

(.
    if(processo_atual.getEstado() == -1){
    	processo_local(nome, processo_atual, calcExpr(tiraIndice(expressao, processo_atual.getIndice(), processo_atual.getEstado()+"")) );
    }else{
    	processo_local_index(nome, processos.indexOf(processo_atual));
    }
    expressao = bool = "";
.)

| 

(.
    Acao a = null;
    Processo p = processo_atual;
	if(primeiro_atual == null)
		primeiro_atual = processo_atual;
    if( processo_atual.getEstado() == -1 ){
		a = acao_simples(la.val, processo_atual, processo_atual.getIndice(), calcExpr(tiraIndice(expressao, processo_atual.getIndice(), processo_atual.getEstado()+"")));
		processo_atual.setAcoesAtuais(new ArrayList<Acao>());
        processo_atual.getAcoesAtuais().add(a);
    }else{
    	acao_index(la.val, processos.indexOf(processo_atual));
    }
    expressao = bool = "";
    processo_atual = p;
.)

("STOP" | "ERROR")) .

process_body = choice | local_process | condition.

choice = ["when("boolean_expr")"]

(.
    expressao = "";
.)

(action_set | action) "->" process_body.

condition = "if" boolean_expr "then" process_body "else" process_body. 

composite_process = "||"

(.
    generator.setCPN(la.val);
    pi = new ArrayList<ProcessInstance>();
.)

uppercase_id ["("parameter_list")"] "=" composite_body[label_visibility][relabels]"."

(.
    ArrayList<HiperGrafo> grafoArray2 = new ArrayList<HiperGrafo>();
    for(int i=0;i<pthreadArray.size();i++){
        for(int j=0;j<pi.size();j++){
            if(pthreadArray.get(i).getPrimeiro().getNome().equals(pi.get(j).process)){
                ProcessThread p = (ProcessThread) pthreadArray.get(i).clone();
                HiperGrafo hg = (HiperGrafo) grafoArray.get(i).clone();
                String s = (pi.get(j).share.equals("") ? "" : pi.get(j).share+"." ) + ( pi.get(j).prefix.equals("") ? "" : pi.get(j).prefix + "." );
                p.prefix = s;
                p.renameAll(s);
                hg.renameAll(s);
                pthreadArrayInstance.add(p);
                grafoArray2.add(hg);
                buscaNome(pthreadArrayInstance, grafoArray2);
                addCheckBox(p, hg);
            }
        }
    }
    grafoArray = grafoArray2;
.)

.

composite_body = process_instance | parallel_list | composite_conditional | composite_replicator .

composite_replicator = "forall" index composite_body.

composite_conditional = "if" boolean_expr "then" composite_body "else" composite_body.

parallel_list = "(" composite_body {"||" composite_body} ")".

process_instance = 

(.
    sharing_set = new ArrayList<String>();
    prefix = "";
.)

["{"(.sharing_set.add(la.val);.)lowercase_id{","(.sharing_set.add(la.val);.)lowercase_id }"}::"][(.prefix = la.val;.)lowercase_id":"]

(.
    try{
        boolean flag = true;
        for(int i=0;i<pthreadArray.size() && flag;i++){
            if(la.val.equals(pthreadArray.get(i).getPrimeiro().getNome()))
                flag = false;
        }
        if(flag)
            new Exception();
        if(sharing_set.size() > 0){
            for(int i=0;i<sharing_set.size();i++){
                pi.add(new ProcessInstance(sharing_set.get(i), prefix, la.val));
            }
        }else{
            pi.add(new ProcessInstance("", prefix, la.val));
        }
    }catch(Exception e){
        ig.output_area.setText(ig.output_area.getText()+"-- line "+t.line+" col "+t.col+": The action "+la.val+" can not be instantiated\n");
        System.exit(1);
    }
.)

uppercase_id["("actual_parameter_list")"].

actual_parameter_list = expr {"," expr}.

END FSP.
