import java.io.ByteArrayOutputStream;
import java.io.PrintStream;
import java.util.ArrayList;
import org.mariuszgromada.math.mxparser.*;
import java.util.Stack;

COMPILER FSP $F


    public ArrayList<Processo> processos;
    public ArrayList<Range> rangeArray = new ArrayList<Range>();
    public ArrayList<Const> constArray = new ArrayList<Const>();
    public ArrayList<String> sharing_set;
    public ArrayList<ProcessInstance> pi;
    public ArrayList<Processo> processo_atual;
    public Processo primeiro_atual;
    public Acao acao_atual;
    public int sup;
    public int inf;
    public int valor_expr;
    public boolean action_set;
    public String index;
    public String expressao = "";
    public String bool = "";
    public String composite_process_name = "";
    public String prefix;
    public String range_name;
    public ArrayList<HiperGrafo> grafoArray = new ArrayList<HiperGrafo>();
    public HiperGrafo grafo;
    public boolean acao_inicio;
    public boolean conjunto;
    public Vertice vertice_atual;
    private ArrayList<ProcessThread> pthreadArray = new ArrayList<ProcessThread>();
    private ArrayList<ProcessThread> pthreadArrayInstance = new ArrayList<ProcessThread>();
    private Geracao generator = new Geracao(pthreadArrayInstance);
    private Trace trace;
    private InterfaceGrafica ig;
    public ByteArrayOutputStream baos;
    public PrintStream ps;
    public Stack<ArrayList<Acao>> stack = new Stack<ArrayList<Acao>>();

    public void init(){
        processos = new ArrayList<Processo>();
        processo_atual = new ArrayList<Processo>();
        primeiro_atual = null;
        acao_atual = null;
        action_set = false;
        inf = sup = valor_expr = -1;
        index = expressao = bool = "";
        grafo = new HiperGrafo();
        grafoArray.add(grafo);
        acao_inicio = conjunto = false;
        vertice_atual = null;
        baos = new ByteArrayOutputStream();
        ps = new PrintStream(baos);
        this.errors.errorStream = ps;
    }

    public void setTrace(Trace trace){
        this.trace = trace;
    }

    public void setIg(InterfaceGrafica ig){
        this.ig = ig;
    }

    public void newThread(){
        finalizaGrafo();
        pthreadArray.add(new ProcessThread(processos, constArray, rangeArray, primeiro_atual));
        init();
    }

    public void startInterface(){
        if(pthreadArray.size() == 1) {
            generator.setPthreadArray(pthreadArray);
            addCheckBox(pthreadArray.get(0));
        }
        trace.setGrafoArray(grafoArray);
        trace.setGenerator(generator);
        trace.start_trace();
    }

    public void p(String str){
    	System.out.println(str);
    }

    public void la(){
        System.out.println("la.val: "+la.val);
    }

    public void t(){
        System.out.println("t.val: "+t.val);
    }

    public void print(){
        System.out.println("--------------------------------------------------------------------");
        for(int i=0;i<processos.size();i++){
            System.out.println(processos.get(i));
            processos.get(i).printAcoes();
        }
        System.out.println("\n"+grafo);
        System.out.println("--------------------------------------------------------------------");
    }

    public void printGrafos(){
        System.out.println("--------------------------------------------------------------------");
        for(int i=0;i<grafoArray.size();i++){
            System.out.println(grafoArray.get(i)+"\n");
            System.out.println("--------------------------------------------------------------------");
        }
    }

    public Processo novoProcesso(String nome, String indice, int estado, Range range){
        Processo p = new Processo(nome, indice, estado, range);
        if(!processos.contains(p)) 
            processos.add(p);
        return p;
    }

    public Acao novaAcao(String nome, Processo pa, String indice, int valor_indice){
        if(pa == null) return null;
        Acao a = new Acao(nome, pa, indice, valor_indice, pa.getEstado(), acao_inicio);
        Acao acao_id = null;
        int i, j;
		for(i=0;i<processos.size();i++){
			j = -1;
			j = processos.get(i).getAcoes().lastIndexOf(a);
			if(j != -1) {
				if(acao_id == null){
					acao_id = processos.get(i).getAcoes().get(j);
				}else if(processos.get(i).getAcoes().get(j).getId() > acao_id.getId()){
					acao_id = processos.get(i).getAcoes().get(j);
				}
			}
		}
        if(acao_id != null)
            a.setId(acao_id.getId() + 1);
        pa.getAcoes().add(a);
        return a;
    }

    public Acao achaAcao(String nome, int estado, int valor_indice){
        for(int i=0;i<processos.size();i++){
            ArrayList<Acao> acoes = processos.get(i).getAcoes();
            for(int j=0;j<acoes.size();j++){
                if(acoes.get(j).getNome().equals(nome) && acoes.get(j).getEstado() == estado && acoes.get(j).getValorIndice() == valor_indice) 
                    return acoes.get(j);
            }
        }
        return null;
    }

    public boolean isNum(char c){
        return c >= '0' && c <= '9';
    }

    public void finalizaGrafo(){
        for (Processo processo: processos) {
            for (Acao acao: processo.getAcoes()) {
                if (acao.getProcessoLocal() != null) {
                    Processo p = processos.get(processos.indexOf(acao.getProcessoLocal()));
                    for (Acao acao_inicio: p.getAcoes()) {
                        if (acao_inicio.getInicio()) {
                            Vertice v1 = grafo.busca(acao.getNome(), acao.getId(), acao.getEstado(), acao.getValorIndice());
                            Vertice v2 = grafo.busca(acao_inicio.getNome(), acao_inicio.getId(), acao_inicio.getEstado(), acao_inicio.getValorIndice());
                            grafo.insereAdj(v1, v2, new Aresta());
                        }
                    }
                }
            }
        }
    }

    public String tiraIndice(String expr, String indice, String valor){
        if(expr.equals("") || indice.equals("") || valor.equals("")) return expr;
        return expr.contains(indice) ? expr.replace(indice, valor) : expr;
    }

    public boolean exprBool(String expr){
        if(!expr.equals("")){
            try{
                Expression expr_obj = new Expression(expr);
                int result = (int)expr_obj.calculate();
                return (boolean) (result == 1);
            }catch(Exception e){
                ig.output_area.setText(ig.output_area.getText()+"-- line "+t.line+" col "+t.col+": invalid expression "+expr+"\n");
            }
        }
        return true;
    }

    public int calcExpr(String expr){
        if(!expr.equals("")){
            try{
                Expression expr_obj = new Expression(expr);
                return (int)expr_obj.calculate();
            }catch(Exception e){
                ig.output_area.setText(ig.output_area.getText()+"-- line "+t.line+" col "+t.col+": invalid expression "+expr+"\n");
            }
        }
        return -1;
    }

    public void zeraAcoesAtuais(){
    	for(int i=0;i<processos.size();i++){
    		processos.get(i).setAcoesAtuais(new ArrayList<Acao>());
    	}
    }

    public void buscaNome(ArrayList<ProcessThread> pthreadArray, ArrayList<HiperGrafo> grafoArray){
        for(int i=0;i<pthreadArray.size();i++){
            ArrayList<Processo> p = pthreadArray.get(i).getProcessos();
            for(int j=0;j<p.size();j++){
                ArrayList<Acao> a = p.get(j).getAcoes();
                for(int k=0;k<a.size();k++){
                    if(buscaNome(grafoArray, a.get(k).getNome(), a.get(k).getValorIndice(), i)) a.get(k).setCompartilhada(true);
                }
            }
        }
    }

    public boolean buscaNome(ArrayList<HiperGrafo> grafoArray, String nome, int valor_indice, int indiceGrafo){
        for(int i=0;i<grafoArray.size();i++){
            Vertice v = grafoArray.get(i).busca(nome, valor_indice);
            if(v != null && i != indiceGrafo){
                v.setCompartilhada(true);
                return true;
            }
        }
        return false;
    }

    public Acao acao_simples(String nome, Processo pa, String indice, int valor_indice){
    	Acao a = null;
    	if(exprBool(tiraIndice(bool, pa.getIndice(), pa.getEstado()+""))){
	    	a = novaAcao(nome, pa, indice, valor_indice);
	        vertice_atual = grafo.insereVertice(a.getNome(), a.getId(), a.getEstado(), a.getValorIndice(), acao_inicio && primeiro_atual.equals(pa) );
            for (Acao acao: pa.getAcoesAtuais()) {
                if (!acao.getIndice().equals("")) {
                    if (acao.getValorIndice() == a.getValorIndice()) {
                        grafo.insereAdj(grafo.busca(acao.getNome(), acao.getId(), acao.getEstado(), acao.getValorIndice()), vertice_atual, new Aresta());
                    }
                } else {
                    grafo.insereAdj(grafo.busca(acao.getNome(), acao.getId(), acao.getEstado(), acao.getValorIndice()), vertice_atual, new Aresta());
                }
            }
            if (!stack.empty()) {
                for (Acao acao: stack.peek()) {
                    grafo.insereAdj(grafo.busca(acao.getNome(), acao.getId(), acao.getEstado(), acao.getValorIndice()), vertice_atual, new Aresta());
                }
            }
	    }
	    return a;
    }

    public void rename(String newName, String oldName){
        for(int i=0;i<grafoArray.size();i++){
            ArrayList<Vertice> vertices = grafoArray.get(i).getVertices();
            for(int j=0;j<vertices.size();j++){
                Vertice v = vertices.get(j);
                if(v.getNome().contains(oldName) ){
                    v.setNome(v.getNome().replace(oldName, newName));
                }
            }
        }
        for(int i=0;i<pthreadArray.size();i++){
            ArrayList<Processo> p = pthreadArray.get(i).getProcessos();
            for(int j=0;j<p.size();j++){
                ArrayList<Acao> a = p.get(j).getAcoes();
                for(int k=0;k<a.size();k++){
                    if(a.get(k).getNome().contains(oldName)){
                        a.get(k).setNome(a.get(k).getNome().replace(oldName, newName));
                    }
                }
            }
        }
    }

    public void addCheckBox(ProcessThread processo){
        ArrayList<Processo> p = processo.getProcessos();
        for(int i=0;i<p.size();i++){
            ArrayList<Acao> acoes = p.get(i).getAcoes();
            for(int j=0;j<acoes.size();j++){
                Acao a = acoes.get(j);
                trace.addCheckBox(a.getNome()+(a.getValorIndice() == -1 ? "" : "["+a.getValorIndice()+"]"));
            }
        }
    }

CHARACTERS
lowercase_letter = 'a' .. 'z'.

uppercase_letter = 'A' .. 'Z'.

digit = '0' .. '9'.

TOKENS
integer = digit {digit}.

uppercase_id = uppercase_letter { digit | lowercase_letter | uppercase_letter | "_" }.

lowercase_id = lowercase_letter { digit | lowercase_letter | uppercase_letter | "_" | "." }.

COMMENTS FROM "/*" TO "*/"

IGNORE '\t' + '\r' + '\n'

PRODUCTIONS

FSP = 

(.
    init();
.)

start{start}.

start = primitive_process | constant_declaration | range_declaration | composite_process.

expr = term  { (.expressao += la.val;.) ("+" | "-") term  }.

term = factor { (.expressao += la.val;.) ("*" | "/") factor }.

factor = 

(.
    if(la.val.charAt(0) >= 'A' && la.val.charAt(0) <= 'Z')
        try{
            int constValue = -1;
            for (int i = 0;i < constArray.size(); i++) {
                if (la.val.contains(constArray.get(i).getNome())) {
                    constValue = constArray.get(i).getValor();
                }
            }
            if(constValue == -1 && !rangeArray.contains(new Range(la.val))) {
                throw new Exception();
            } else {
                expressao += ""+constValue;
            }
        }catch(Exception e){
            errors.count++;
            ig.output_area.setText(ig.output_area.getText()+"-- line "+t.line+" col "+t.col+": Cannot find const "+la.val+"\n");
        }
    else
        expressao += la.val;
.) 

("("expr

(.
	if(la.val.charAt(0) == '(' || la.val.charAt(0) == ')' )
        expressao += la.val;
.)

")" | uppercase_id | lowercase_id | integer) .

boolean_expr = 

(.
	expressao = "";
.) 

expr 

(.
	bool += expressao;
.)

{ 

(.
	bool += la.val;
.) 

('>' | '<' | ">=" | "<=" | "==" | "&&" | "||" | "!" | "!=") 

(.
	expressao = "";
.) 

expr 

(.
	bool += expressao;
.)

}
.

constant_declaration = "const" 

(. 
    String nome = la.val;
.)

uppercase_id "=" 

(.
    int n = 0;
    try{
        n = Integer.parseInt(la.val);
        Const c = new Const(nome, n);
        if(constArray.contains(c)){
            throw new Exception();
        } else {
            constArray.add(c);
        }                
    }catch(Exception e){
        errors.count++;
        ig.output_area.setText(ig.output_area.getText()+"-- line "+t.line+" col "+t.col+": Const already exist "+la.val+"\n");
    }
.)

expr (. expressao = ""; .).

range_declaration = "range" 

(.
    String nome = la.val;
.)

uppercase_id "=" 

(.
    int infLocal = -1;
    if( isNum(la.val.charAt(0)) ){
        infLocal = Integer.parseInt(la.val);
    }else{
        int i = constArray.indexOf(new Const(la.val, 0));
        if(i != -1)
            infLocal = constArray.get(i).getValor();
    }
.)

expr ".." 

(.
    int supLocal = -1;
    if( isNum(la.val.charAt(0)) ){
        supLocal = Integer.parseInt(la.val);
    }else{
        int i = constArray.indexOf(new Const(la.val, 0));
        if(i != -1)
            supLocal = constArray.get(i).getValor();
    }
.)
expr

(.
        Range r = new Range(nome, infLocal, supLocal);
        if(!rangeArray.contains(r))
            rangeArray.add(r);
        r = rangeArray.get(rangeArray.size()-1);
        expressao = "";
.)
.

index = "[" 

(.
    index = la.val;
    expressao = "";
.) 

expr{":"

(.
    range_name = la.val;
    expressao = "";

.)

expr

(.
    int i = rangeArray.indexOf(new Range(range_name));
    if(i != -1){
        inf = rangeArray.get(i).getInf();
        sup = rangeArray.get(i).getSup();
    }else{
        inf = calcExpr(expressao);
    }
    expressao = "";
.)

{".."

expr

(.
    sup = calcExpr(expressao);
.)

}} "]".

index_label = index {index}.

simple_action = 

(.
    String nome = la.val;
.)

lowercase_id[index_label]

(.
	Acao a = null;
	if (primeiro_atual == null) {
		primeiro_atual = processo_atual.get(0);
    }
    for (Processo p: processo_atual) {
        ArrayList<Acao> acoes_atuais = new ArrayList<Acao>();
        if (inf != -1 && sup != -1) {
            for (int i = inf; i <= sup; i++) {
                a = acao_simples(nome, p, !range_name.equals("") ? index : "", i);
                if (a != null)
                    acoes_atuais.add(a);
            }
        } else if (!index.equals("") && index.charAt(0) >= 'a' && index.charAt(0) <= 'z' && !p.getIndice().equals("") && index.equals(p.getIndice())) {
            a = acao_simples(nome, p, "", calcExpr(tiraIndice(expressao, index, p.getEstado()+"")));
            if (a != null)
                acoes_atuais.add(a);
        } else {
            a = acao_simples(nome, p, "", calcExpr(expressao));
            if (a != null)
                acoes_atuais.add(a);
        }
        if (!action_set)
            p.setAcoesAtuais(acoes_atuais);

    }
    expressao = range_name = "";
    if(la.val.equals("->")) acao_inicio = false;
    //for use in action_set
    acao_atual = a;
.)
.

action = simple_action {"."simple_action}.

action_set = 

(.
	ArrayList<Acao> acoes_atuais = new ArrayList<Acao>();
    action_set = true;
.)

"{" action

(.
	acoes_atuais.add(acao_atual);
.)

 { "," action 

(.
	acoes_atuais.add(acao_atual);
.)

} "}" 

(.
    for (Processo processo: processo_atual) {
	    processo.setAcoesAtuais(acoes_atuais);
    }
    action_set = false;
.).

alphabet_extension = "+"action_set.

label_visibility = hide_label | expose_label.

hide_label = "\\" action_set.

expose_label = "@" action_set.

relabels = "/" relabel_set.

relabel_set = "{"relabel{","relabel}"}".

relabel = simple_relabel | "forall" index relabel_set.

simple_relabel = 

(.
    String newName = la.val;
.)
action "/" 

(.
    String oldName = la.val;
.)

action

(.
    rename(newName, oldName);
.)
.

primitive_process =  

(.
    String nome = la.val;
.)

uppercase_id["("parameter_list")"][index_label]

(.
    int calc = expressao == "" ? -1 : (int)(new Expression(expressao)).calculate();
    int eval = index.length() > 0 && index.charAt(0) >= 'a' && index.charAt(0) <= 'z' ? -1 : calc;
    Processo p = null;
    if (inf != -1 && sup != -1) {
        for (int i = inf; i <= sup; i++) {
            processo_atual.add(novoProcesso(nome, index, i, new Range(range_name, inf, sup)));
        }
        valor_expr = -1;
    } else {
        processo_atual.add(novoProcesso(nome, index, eval, null));
    }
    if(primeiro_atual == null) primeiro_atual = processo_atual.get(0);
    acao_inicio = true;
    expressao = "";
    inf = sup = -1;
.)

"=" ( local_process | "(" primitive_process_body ")" )

(.
    if(la.val.equals(".")){
        newThread();
        inf = sup = -1;
    } else if (la.val.equals(",")) {
        processo_atual = new ArrayList<Processo>();
    }
.)

("." | ",").

parameter_list = parameter {","parameter}.

parameter = 

(.
    String nome = la.val;
.)

uppercase_id "=" 

(.
    int n = 0;
    try{
        n = Integer.parseInt(la.val);
    }catch(Exception e){
    }
    Const c = new Const(nome, n);
    if(!constArray.contains(c))
        constArray.add(c);
.)

integer.

primitive_process_body = process_body[alphabet_extension][label_visibility][relabels].

local_process = 

(.
    String nome = la.val;
.)

(uppercase_id[index]

(.
    for (Processo processo: processo_atual) {
        if (processo.getAcoesAtuais().size() != 0) {
            for (Acao acao: processo.getAcoesAtuais()) {
                int eval = -1;
                if (!index.equals("") && index.charAt(0) >= 'a' && index.charAt(0) <= 'z') {
                    if (processo.getIndice().equals(index)) {
                        eval = calcExpr(tiraIndice(expressao, index, processo.getEstado()+""));
                    } else if (acao.getIndice().equals(index)) {
                        eval = calcExpr(tiraIndice(expressao, index, acao.getValorIndice()+""));
                    }
                } else {
                    eval = calcExpr(expressao);
                }
                Processo p = new Processo(nome, eval);
                acao.setProcessoLocal(p);
            }
        } else if(processo == primeiro_atual) {
            Processo p = new Processo(nome, calcExpr(expressao));
            primeiro_atual = p;
        }
    }
    expressao = bool = "";
.)

| 

(.
    for (Processo processo: processo_atual) {
        if (processo.getAcoesAtuais().size() != 0) {
            for (Acao acao: processo.getAcoesAtuais()) {
                Acao a = acao_simples(la.val, processo, processo.getIndice(), -1);
                processo.setAcoesAtuais(new ArrayList<Acao>());
                processo.getAcoesAtuais().add(a);
            }
        } else {
            Acao a = acao_simples(la.val, processo, processo.getIndice(), -1);
            processo.setAcoesAtuais(new ArrayList<Acao>());
            processo.getAcoesAtuais().add(a);
        }
    }
    expressao = bool = "";
.)

("STOP" | "ERROR")) .

process_body = 

(.
    if (la.val.equals("(")) {
        ArrayList<Acao> acoes = new ArrayList();
        for (Processo p: processo_atual) {
            acoes.addAll(p.getAcoesAtuais());
        }
        stack.push(acoes);
    }
.)

"("choice

(.
    if (la.val.equals(")")) {
        stack.pop();
    }
.)

")" | choice | local_process | condition.

choice = action_prefix{

(.
    if(la.val.equals("|")){
        acao_inicio = stack.empty();
        zeraAcoesAtuais();
    }
.)
    
"|" action_prefix}.

action_prefix = ["when("boolean_expr")"]

(.
    expressao = "";
.)

(action_set | action) "->" process_body.

condition = "if" boolean_expr "then" process_body "else" process_body. 

composite_process = "||"

(.
    generator.setCPN(la.val);
    pi = new ArrayList<ProcessInstance>();
.)

uppercase_id ["("parameter_list")"] "=" composite_body[label_visibility][relabels]"."

(.
    ArrayList<HiperGrafo> grafoArray2 = new ArrayList<HiperGrafo>();
    for(int i=0;i<pthreadArray.size();i++){
        for(int j=0;j<pi.size();j++){
            Processo processo = pthreadArray.get(i).getPrimeiro(); 
            if(processo.getNome().equals(pi.get(j).process)){
                ProcessThread p = (ProcessThread) pthreadArray.get(i).clone();
                HiperGrafo hg = (HiperGrafo) grafoArray.get(i).clone();
                String s = (pi.get(j).share.equals("") ? "" : pi.get(j).share+"." ) + ( pi.get(j).prefix.equals("") ? "" : pi.get(j).prefix + "." );
                p.prefix = s;
                p.renameAll(s, !pi.get(j).share.equals(""));
                hg.renameAll(s, !pi.get(j).share.equals(""));
                pthreadArrayInstance.add(p);
                grafoArray2.add(hg);
                buscaNome(pthreadArrayInstance, grafoArray2);
                addCheckBox(p);
            }
        }
    }
    grafoArray = grafoArray2;
.)

.

composite_body = process_instance | parallel_list | composite_conditional | composite_replicator .

composite_replicator = "forall" index composite_body.

composite_conditional = "if" boolean_expr "then" composite_body "else" composite_body.

parallel_list = "(" composite_body {"||" composite_body} ")".

process_instance = 

(.
    sharing_set = new ArrayList<String>();
    prefix = "";
.)

["{"(.sharing_set.add(la.val);.)lowercase_id{","(.sharing_set.add(la.val);.)lowercase_id }"}::"][(.prefix = la.val;.)lowercase_id":"]

(.
    try{
        boolean flag = true;
        for(int i=0;i<pthreadArray.size() && flag;i++){
            Processo p = pthreadArray.get(i).getPrimeiro();
            if(la.val.equals(p.getNome())) {
                flag = false;
            }
        }
        if(flag) {
            throw new Exception();
        }
        if(sharing_set.size() > 0){
            for(int i=0;i<sharing_set.size();i++){
                pi.add(new ProcessInstance(sharing_set.get(i), prefix, la.val));
            }
        }else{
            pi.add(new ProcessInstance("", prefix, la.val));
        }
    }catch(Exception e){
        ig.output_area.setText(ig.output_area.getText()+"-- line "+t.line+" col "+t.col+": The action "+la.val+" can not be instantiated\n");
    }
.)

uppercase_id["("actual_parameter_list")"].

actual_parameter_list = expr {"," expr}.

END FSP.
